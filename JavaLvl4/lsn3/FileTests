package lsn3.homeWork;

import java.io.*;
import java.util.*;

public class FileUtility {

    String path = "/Volumes/Transcend/Java4Maven/src/main/java/lsn3/homeWork/";
    Scanner scanner;
    FileWriter writer;
    String temp;

    /*
     * Структура файла ввода: в первой строке одно целое число - N
     * далее следует N целых чисел через пробел
     * Метод должен отсортировать элементы с четным значением,
     * а нечетные оставить на своих местах и вывести результат через пробел в файл вывода
     * Пример:
     * in "array.txt":
     * 5
     * 5 4 2 1 3    // 2 4
     * out "arrayout.txt":
     * 5 2 4 1 3
     */

    //
    public void sortEvenElements(File in, File out) throws IOException {
        //TODO
        // не выполнена часть с сортировкой

        List<String> listOfStr = new ArrayList<>();
        ArrayList<Integer> listOfInt = new ArrayList<>();
        // чтение потока
        InputStreamReader isr = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(isr);
        // запись потока
        BufferedWriter bwIn = new BufferedWriter(new FileWriter(in));

        System.out.println("Введите числа. Для завершения ввведите 'exit'");
        while (true) {
            String s = br.readLine();
            listOfStr.add(s);
            if (s.equals("exit")) {
                isr.close();
                br.close();
                listOfStr.remove(listOfStr.size() - 1); // костыль, чтобы не выводилось 'exit'
                break;
            }
        }
        // чтение листа в файл по условию
        bwIn.write(listOfStr.get(0)); // первый элемент
        bwIn.newLine(); // перевод строки
        for (int i = 1; i < listOfStr.size(); i++) { // оставшаяся часть листа
            bwIn.write(listOfStr.get(i) + " ");
            listOfInt.add(Integer.parseInt(listOfStr.get(i)));
        }
        bwIn.close();

        BufferedWriter bwOut = new BufferedWriter(new FileWriter(out));
        /*
         тут должен быть код с сортировкой
         */
        for (int i = 0; i < listOfInt.size(); i++) {
            bwOut.write(listOfInt.get(i));
        }
        bwOut.close();
    }


    /*
     * Генератор паролей, пароль должен отвечать требованиям:
     * длина не менее 6 и не более 12, включает минимум по одному символу
     * из наборов: a-z, A-Z, 0-9, {*,!,%}
     * все пароли должны быть разными
     * На вход метод получает файл с логинами пользователей "login.txt"
     * Метод должен записать в файл вывода записи с логинами и паролями
     * для каждого пользователя "pass.txt"
     */

    public void passwordGen(File in, File out) throws IOException {
        //TODO
        // выполнено

        // логин и пароль будем хранить в HashMap
        Map<String, Character[]> listOfLogin = new HashMap<>();
        BufferedReader reader = new BufferedReader(new FileReader(in));
        String loginName;
        // считываем содержимое login.txt и формируем пару логин - пароль
        while ((loginName = reader.readLine()) != null) {
            listOfLogin.put(loginName, makePass());
        }
        reader.close();
        // записываем логин пароль в файл pass.txt
        PrintWriter pw = new PrintWriter(out);
        for (Map.Entry<String, Character[]> entry : listOfLogin.entrySet()) {
            pw.write(Thread.currentThread().getName() + " pass: " + entry.getKey() + "\n");
        }
        pw.close();
    }

    // метод генерации пароля (вспомогательный метод passwordGen)
    public Character[] makePass() {
        int character, passLength;
        char pass;
        int max = 12;
        int min = 6;

        passLength = (int) (Math.random() * ++max) + min;
        Character[] passArr = new Character[passLength];

        if (passLength > 5 && passLength < 13) {
            for (int i = 0; i < passLength; i++) {
                character = (int) (Math.random() * 93 + 33);
                pass = (char) character;
                passArr[i] = pass;
            }
        }
        return passArr;
    }

    /*
     * Метод должен дописать в переданный файл "append.txt" все
     * записи из списка по одной записи в строке
     * */
    public void appender(File file, List<String> records) throws IOException {
        //TODO
        // выполнено
        BufferedWriter writer = new BufferedWriter(new FileWriter(file));
        for (int i = 0; i < records.size(); i++) {
            writer.write(records.get(i) + "\n");
        }
        writer.close();
    }

    /*
     * Метод возвращает список из N последних строк файла "file.txt"
     * строки можно дополнять пробелами до длины 80
     * тогда количество символов в файле будет предсказуемо
     * 10 строк это ровно 800 символов
     * Изучите класс RandomAccessFile для эффективного решения данной
     * задачи
     * Альтернативное решение: использование очереди или стека
     * */
    public List<String> getNString(String pathToFile, int n) throws IOException {
        //TODO
        // выполнено, реализация через Stack
        List<String> list = new ArrayList<>(); // сюда добавляем считанные из стека строки
        Stack<String> stack = new Stack<>(); // сюда добавляем считанные из файла строки

        BufferedReader reader = new BufferedReader(new FileReader(pathToFile));
        // считываем содержимое файла построчно и складываем в стек
        while (reader.read() != -1) {
            stack.add(reader.readLine());
        }
        reader.close();
        // достаем из стека нужно количество строк и добавляем в лист
        for (int i = 0; i < n; i++) {
            list.add(stack.pop());
        }
        return list;
    }

}
