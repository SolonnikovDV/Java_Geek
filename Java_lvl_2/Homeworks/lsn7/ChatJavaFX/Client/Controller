package ChatJavaFX.Client;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.URL;
import java.util.ResourceBundle;

public class Controller{

    @FXML
    public TextArea textAria;
    @FXML
    public TextField textField;
    @FXML
    public HBox upperPanel;
    @FXML
    public HBox bottomPanel;
    @FXML
    public TextField loginField;
    @FXML
    public PasswordField passwordField;
    @FXML
    public Button Authorize;

    private boolean isAuthorized;

    // дополнительны поля
    Socket socket;
    DataInputStream in;
    DataOutputStream out;

    // константы для IP  и Host
    final String IP_ADRESS = "localhost";
    final int PORT = 8189;


    // метод будет вызываться когда логин и пароль уже введены пользователем
    public void connect () {
        try {
            socket = new Socket(IP_ADRESS, PORT);
            in = new DataInputStream(socket.getInputStream());
            out = new DataOutputStream(socket.getOutputStream());

            //создаем поток который будет считывать данные
            new Thread(() -> {
                try {
                    // цикл авторизации клиент
                    while (true) {
                        String str = in.readUTF(); // считывается то что пришло с сервера, если это /authOk то авторизация прошла успешно
                        if (str.equals("/authOk")){
                            setAuthorized(true);// скрываем поля авторизации и отркываем поле ввода сообещений
                            break;
                        } else {
                            textAria.appendText(str + "\n");
                        }
                    }
                    // цикл работы
                    while (true) {
                        String str = in.readUTF();
                        textAria.appendText(str + "\n");
                    }
                } catch (IOException e) {
                    e.printStackTrace();

                } finally {
                    try {
                        socket.close();

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    setAuthorized(false); // при выходе скрываем нижнюю панель и открываем верхнюю для авторизации
                }
            }).start();

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //описываем метод отрпавки сообщений
    public void sendMSG(ActionEvent actionEvent) {
        try {
            out.writeUTF(textField.getText()); // в элемент textAria добавляем значение из textField и отсылаем сообщение на сервер
            textField.setText("");// очищвем поле texField
            textField.requestFocus();// возвращает фокус тектовому полю

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    // отображение пнели авторизации и панели ввода сообщений
    public void setAuthorized(boolean authorized) {
        isAuthorized = authorized;

        if (isAuthorized) {
            upperPanel.setVisible(false);
            bottomPanel.setVisible(true);

        } else {
            upperPanel.setVisible(true);
            bottomPanel.setVisible(false);
        }
    }

    public void tryToAuth(ActionEvent actionEvent) {
        // если сокет еще не создан или уже закрылся то вызываем метод connect() с обработкой обработкой событий
        if (socket == null || socket.isClosed()) {
            connect();

        }
        try {
            out.writeUTF("/auth " + loginField.getText() + " " + passwordField.getText());
            loginField.clear();
            passwordField.clear();

        } catch (IOException e) {
            e.printStackTrace();
        }

    }


}
