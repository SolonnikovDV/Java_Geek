import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Semaphore;

public class Runner implements Runnable {

    private final Semaphore previous;
    private final Semaphore next;
    private final String word;

    List<String> list = new LinkedList<>();

    public Runner(Semaphore previous, Semaphore next, String word) {
        this.previous = previous;
        this.next = next;
        this.word = word;
    }

    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            wait();
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(word);
            list.add(word); // криво отрабатывает
            goNext();
        }
        System.out.println(list); // криво отрабатывает
    }

    private void goNext() {
        next.release();
    }

    private void wait() {
        try {
            previous.acquire();
        } catch (InterruptedException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

}
