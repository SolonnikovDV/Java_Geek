import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Организуем гонки:
 * Все участники должны стартовать одновременно, несмотря на то, что на подготовку у каждого из них уходит разное время.
 * В туннель не может заехать одновременно больше половины участников (условность).
 * Попробуйте всё это синхронизировать.
 * Только после того как все завершат гонку, нужно выдать объявление об окончании.
 * Можете корректировать классы (в т.ч. конструктор машин) и добавлять объекты классов из пакета util.concurrent.
 */
public class MainClass {

    private static final int CARS_COUNT = 4;
    private static final Road ROAD_FIRST = new Road(60);
    private static final Road ROAD_SECOND = new Road(40);
    private static final Tunnel TUNNEL = new Tunnel();
    static int level = 0;


    public static void main(String[] args) throws BrokenBarrierException, InterruptedException {

        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");

        Race race = new Race(ROAD_FIRST, TUNNEL, ROAD_SECOND);// в конструкторе ArrayList
        Car[] cars = new Car[CARS_COUNT];

        // создаются экземпляры Car
        for (int j = 0; j < cars.length; j++) {
            cars[j] = new Car(race, 20 + (int) (Math.random() * 10));
        }

        // запускаются потоки
        for (int j = 0; j < cars.length; j++) {
            new Thread(cars[j]).start();
        }

    }
}
