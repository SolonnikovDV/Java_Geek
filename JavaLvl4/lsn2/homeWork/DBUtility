package lsn2.homeWork;

import java.sql.Connection;
import java.sql.Statement;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;


public class DBUtility {
    /*
     * Каждый из тасков решается одним SQL запросом
     */

    /*
    Создать таблицу принтеры, Printer(id INTEGER AI PK U, model INTEGER, color TEXT, type TEXT, price INTEGER)
    добавить в нее 3 записи:
    1 1012 col laser 20000 (производитель HP)
    2 1010 bw jet 5000 (производитель Canon)
    3 1010 bw jet 5000 (производитель Canon)
    Каждая вставка в таблицу принтер должна отражаться добавлением записи в таблицу продукт
     */

    void addPrinters(Statement stmt, String productType, int model, String сolor, String type, String maker, int price) {
        // TODO: 16.12.2019
        try {
            // строка не компилируется: [SQLITE_ERROR] SQL error or missing database (5 values for 6 columns)
//            stmt.execute("INSERT INTO Printer (productType, model, color, type, maker, price) VALUES ('" + printer.getProductType() + "', '" + printer.getModel() + "', '" + printer.getColor() + ", " + printer.getType() + "','" + printer.getMaker() + "', '" + printer.getPrice() + "');");

            stmt.execute("INSERT INTO Printer (productType, model, color, type, maker, price) " +
                    "VALUES ('" + productType + "','" + model + "', '" + сolor + "', '" + type + "', '" + maker + "', '" + price + "')");
            stmt.execute("INSERT INTO Product (maker, model, type) " +
                    "VALUES ('" + maker + "', '" + model + "', '" + type + "')");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public void createPrinterTable(Connection conn, Statement stmt) {
        // TODO: 16.12.2019
        try {
            stmt.execute(
                    "CREATE TABLE IF NOT EXISTS Printer(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, " +
                            "productType TEXT, model INTEGER, color TEXT, type TEXT, maker TEXT, price INTEGER)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    /*
     * Метод должен вернуть список уникальных моделей PC дороже 15 тысяч
     */

    public ArrayList<String> selectExpensivePC(Statement stmt) {
        //todo
        List<String> list = new ArrayList<>();
        ResultSet rs;
        String str;
        try {
            rs = stmt.executeQuery("SELECT * from PC WHERE price > 15000;");
            while (rs.next()) {
                str = rs.getString("model");
                list.add(str);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return (ArrayList<String>) list;
    }

    /*
     * Метод должен вернуть список id ноутов, скорость процессора
     * которых выше чем 2500
     */

    public ArrayList<Integer> selectQuickLaptop(Statement stmt) {
        // TODO: 16.12.2019
        List<Integer> list = new ArrayList<>();
        ResultSet rs;
        int id;
        try {
            rs = stmt.executeQuery("SELECT * from Laptop WHERE speed > 2500;");
            while (rs.next()) {
                id = rs.getInt("id");
                list.add(id);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (ArrayList<Integer>) list;
    }

    /*
     * Метод должен вернуть список производителей которые
     * делают и пк и ноутбуки
     */

    // в таблицах Laptop и PC нет столбца "производитель"
    // столбцы добавлены вручную
    public ArrayList<String> selectMaker(Statement stmt) {
        //todo
        List<String> list = new ArrayList<>();
        ResultSet rs;
        try {
            rs = stmt.executeQuery("SELECT DISTINCT PC.maker from Laptop, PC WHERE Laptop.maker = PC.maker");
            while (rs.next()) {
                list.add(rs.getString("maker"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (ArrayList<String>) list;
    }

    /*
     * Метод должен вернуть максимальную среди всех произодителей
     * суммарную стоимость всех изделий типов ноутбук или компьютер,
     * произведенных одним производителем
     * Необходимо объединить таблицы продуктов ноутбуков и компьютеров
     * и отгрупировать по сумме прайсов после чего выбрать максимум
     * или сделать любым другим способом
     */

    // РЕШЕНИЯ ПОКА НЕТ

    public int makerWithMaxProceeds(Statement stmt) {
        int result = 0;
        //todo

        return result;
    }

    // результирующая таблица для подсчета суммы по производителям
    public void createResultTable(Connection conn, Statement stmt) {
        try {
            stmt.execute(
                    "CREATE TABLE IF NOT EXISTS Result(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, " +
                            "maker TEXT, sum INTEGER)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // метод должен объедить таблицы и добавить результат в итоговуб таблицу Result
    public void addProducts(Statement stmt) {
        try {
            stmt.execute("SELECT PC.maker, PC.price, Laptop.maker, Laptop.price FROM Laptop LEFT JOIN PC ON condition;");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


}
