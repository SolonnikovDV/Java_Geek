package lsn1.homeWork.task3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

//используте ArrayList для хранения фруктов

/**
 * a. Есть классы Fruit -> Apple, Orange;(больше фруктов не надо)
 * b. Класс Box в который можно складывать фрукты, коробки условно сортируются по типу фрукта, поэтому в одну коробку
 * нельзя сложить и яблоки, и апельсины; ВЫПОЛНЕНО
 * c. Для хранения фруктов внутри коробки можете использовать ArrayList; ВЫПОЛНЕНО
 * d. Сделать метод getWeight() который высчитывает вес коробки, зная количество фруктов и вес одного фрукта
 * (вес яблока - 1.0f, апельсина - 1.5f, не важно в каких это единицах); ВЫПОЛНЕНО
 * e. Внутри класса коробка сделать метод compare, который позволяет сравнить текущую коробку с той, которую подадут
 * в compare в качестве параметра, true - если их веса равны, false в противном случае(коробки с яблоками мы можем
 * сравнивать с коробками с апельсинами);
 * f. Написать метод, который позволяет пересыпать фрукты из текущей коробки в другую коробку(помним про сортировку
 * фруктов, нельзя яблоки высыпать в коробку с апельсинами), соответственно в текущей коробке фруктов не остается,
 * а в другую перекидываются объекты, которые были в этой коробке; ВЫПОЛНЕНО
 * g. Не забываем про метод добавления фрукта в коробку. ВЫПОЛНЕНО
 */

public class Box<T extends Fruit> {

    private List<T> fruitList;
    private float totalWeight;
    private Class typeOfClass;

    public Box() {
        this.fruitList = new ArrayList<T>();
        this.typeOfClass = null;
    }

    public List<T> getFruitList() {
        return fruitList;
    }

    public boolean compareTo(Box<? extends Fruit> other) {
        //TODO
        //this <-> other
        //if this.summary weight > other.summary weight
        // then true
        if (other != null && this.getWeight() == other.getWeight()) {
            return true;
        } else return false;

    }

    public boolean addFruit(T fruit) {
        //TODO
        // проверка класса добавляемого элемента
        if (typeOfClass == null) {
            typeOfClass = fruit.getClass();
            fruitList.add(fruit);
        } else if (typeOfClass.equals(fruit.getClass())) {
            fruitList.add(fruit);
        } else {
            try {
                throw new DropException();
            } catch (DropException e) {
                e.printStackTrace();
            }
            return false;
        }
        return true;
    }

    public void dropFruits(Box<?> otherBox) {
        //TODO
        //otherBox -> this
        int index = fruitList.size();
        if(fruitList.get(0).getClass().equals(otherBox.getFruitList().get(0).getClass())){
            fruitList.addAll(index, (Collection<? extends T>) otherBox.getFruitList());
            otherBox.getFruitList().clear();
        } else {
            try {
                throw new DropException();
            } catch (DropException e) {
                e.printStackTrace();
            }
        }
    }

    public double getWeight() {
        int len = fruitList.size();
        for (int i = 0; i < len; i++) {
            totalWeight += fruitList.get(i).getWeight();
        }
        return totalWeight;
    }

    @Override
    public String toString() {
        return "Box{" +
                "fruitList=" + fruitList +
                '}';
    }
}
